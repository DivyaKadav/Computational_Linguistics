# -*- coding: utf-8 -*-
"""Minimal Pair Finder using CMU Pronouncing Dictionary

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JTol-8qzrekwHwGA2XpvVdJB2CeiXtwf
"""

import nltk
from nltk.corpus import cmudict
from nltk.tokenize import word_tokenize
from google.colab import files

# Download the required NLTK resources
nltk.download('cmudict')
nltk.download('punkt')  # Add this line to download the punkt package

def get_phonemes(word):
    """Get the phonemes for a given word"""
    try:
        return d[word.lower()][0]
    except KeyError:
        return []

def find_minimal_pairs(sentences):
    """Find minimal pairs in a list of sentences"""
    minimal_pairs = []
    for sentence in sentences:
        tokens = word_tokenize(sentence)
        for i in range(len(tokens) - 1):
            word1 = tokens[i]
            word2 = tokens[i + 1]
            phonemes1 = get_phonemes(word1)
            phonemes2 = get_phonemes(word2)
            if len(phonemes1) == len(phonemes2) and sum(p1 != p2 for p1, p2 in zip(phonemes1, phonemes2)) == 1:
                minimal_pairs.append((word1, word2))
    return minimal_pairs

# Upload sentences file
uploaded = files.upload()

# Read sentences from uploaded file
sentences = []
for fn in uploaded.keys():
    with open(fn, 'r') as f:
        sentences.extend([line.strip() for line in f.readlines()])

# Load the CMU Pronouncing Dictionary
d = cmudict.dict()

# Find minimal pairs
minimal_pairs = find_minimal_pairs(sentences)

# Print the minimal pairs
for pair in minimal_pairs:
    print(pair)